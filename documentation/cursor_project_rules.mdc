---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

*   **Type:** Configurable and Reusable Web-based User Portal
*   **Description:** A portal designed to serve multiple Akore software applications, beginning with the Fuel Shipment Tracking System (FSTS).
*   **Primary Goal:** To provide a unified, secure, and consistent user experience for accessing and managing accounts across different Akore software products. The portal simplifies user onboarding and offers a space for essential interactions.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   `next.js@15`: Following Next.js 15 App Router conventions.
    *   Uses `app/` directory with nested folders for different routes.
    *   Example 1: "Next.js 15 (App Router)" → `app/[route]/page.tsx` conventions

### Core Directories

*   **Versioned Structure:**

    *   `[folder]`: Tech-stack-versioned purpose
    *   Example 1: `app/api` → "Next.js 15 API routes with Route Handlers"
    *   Example 2: `src/views` → "Vue 3 composition API components"

### Key Files

*   **Stack-Versioned Patterns:**

    *   `[file]`: Version-specific implementation
    *   Example 1: `app/dashboard/layout.tsx` → "Next.js 15 root layouts"
    *   Example 2: `pages/_app.js` → "Next.js Pages Router customization"

## Tech Stack Rules

*   **Version Enforcement:**

    *   `next@15`: Conventions tied to version
    *   Example: "next@15": "App Router required, no `getInitialProps`"

## PRD Compliance

*   **Non-Negotiable:**

    *   "To provide a unified, secure, and consistent user experience for accessing and managing accounts across different Akore software products."

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Example: "Next.js 15 Auth Flow → `app/auth/login/page.tsx` uses server actions"

## Best Practices

*   **Next.js with React and TypeScript**

    *   Ensure components are reusable and modular.
    *   Implement SSR and ISR for better performance and SEO.
    *   Leverage TypeScript for type safety, reducing runtime errors.

*   **Tailwind CSS**

    *   Utilize utility-first approach for consistent styling.
    *   Ensure accessibility standards are met, such as appropriate color contrast.

*   **Supabase (PostgreSQL)**

    *   Use role-based access control for user data protection.
    *   Ensure data validation to prevent SQL injection.

*   **Clerk for Authentication**

    *   Use metadata features for custom role management.
    *   Ensure robust email verification and session management.

## Rules

*   Derive folder/file patterns directly from `techStackDoc` versions.
*   If Next.js 15 App Router: Enforce `app/` directory with nested route folders.
*   Never mix version patterns (e.g., no `pages/` in App Router projects)."
