---
description: Apply these rules when creating the project
globs:
alwaysApply: true
---
## Project Overview

*   **Type:** Configurable and reusable web-based user portal
*   **Description:** To build a central authentication, registration, and interaction point for various software applications by Akore. Initially developed for the Fuel Shipment Tracking System (FSTS).
*   **Primary Goal:** To provide a unified, secure, and consistent user experience across different Akore software products, simplifying user onboarding and serving as a dedicated interface for essential interactions.

## Project Structure

### Framework-Specific Routing

*   **Directory Rules:**

    *   `Next.js 14.2.23`: Uses `app/[route]/page.tsx` conventions
    *   Example: For authentication routes, use `app/auth/[action]/page.tsx`

### Core Directories

*   **Versioned Structure:**

    *   `app/api`: "Next.js 14.2.23 API routes with Route Handlers"
    *   `src/components`: Contains reusable UI components built with React and the Shadcn UI library

### Key Files

*   **Stack-Versioned Patterns:**

    *   `app/dashboard/layout.tsx`: "Next.js 14.2.23 root layouts using App Router"
    *   `app/auth/page.tsx`: "Authentication layout and pages for Clerk"

## Tech Stack Rules

*   **Version Enforcement:**

    *   `next@14.2.23`: "App Router required, no `pages` directory structure"
    *   `@clerk/nextjs@6.10.2`: Utilizes Clerk for authentication and user management
    *   `@clerk/themes@2.2.13`: Ensures visual consistency aligning with Clerk theme standards

## PRD Compliance

*   **Non-Negotiable:**

    *   "Primary Entity registration must support multiple entity types beyond FSTS and be configurable."

## App Flow Integration

*   **Stack-Aligned Flow:**

    *   Example: "Next.js 14.2.23 Auth Flow with Clerk integration utilizes API routes in `app/api` for secure server actions"

## Best Practices

*   **Next.js (14.2.23)**

    *   Utilize server components where possible for better performance.
    *   Avoid client-side rendering when server-side can suffice for better SEO.
    *   Use TypeScript for type safety across the application.

*   **Clerk**

    *   Ensure proper metadata is set up for user roles and permissions.
    *   Implement robust email verification flows using Clerk's built-in features.

*   **Supabase**

    *   Store sensitive data in encrypted fields.
    *   Use serverless functions for complex database interactions.

*   **Tailwind CSS**

    *   Leverage utility classes to maintain design consistency.
    *   Ensure accessibility compliance with proper contrast and responsive layouts.

## Rules

*   Derive folder/file patterns directly from `techStackDoc` versions.
*   Next.js 14.2.23 App Router: Enforce `app/` directory with nested route folders.
*   Never mix version patterns (no `pages/` in App Router projects).
*   Maintain clear separation between authentication data managed by Clerk and business data managed by Supabase.
